@import 'animation';

//TO%

@function prc($pxOne, $pxTwo) {
    $result: ($pxOne/$pxTwo)*100%;
    @return $result;
}

//REM
@function rem($px) {
    $result: ($px/16)+rem;
    @return $result;
}

//EM

@function em($px) {
    $result: ($px/16)+rem;
    @return $result;
}

// адаптивное свойство
$maxWidth: 1920; //максимальный размер экрана
$maxWidthContainer: 1200; //максимальный размер контейнера

@mixin adaptiv-value($property, $startSize, $minSize, $type) {
    $addSize: $startSize - $minSize;

    @if $type==1 {
        //Только если меньше контейнера
        #{$property}: $startSize + px;

        @media (max-width: #{$maxWidthContainer + px}) {
            #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
        }
    }

    @else if $type==2 {
        //Только если больше контейнера
        #{$property}: $startSize + px;

        @media (min-width: #{$maxWidthContainer + px}) {
            #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
        }
    }

    @else {
        //Всегда
        #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
}

//@include adaptiv-value("значение", начальный размер, конечный размер, тип(1-меньше контейнера, 2-больше, 0-всегда))

.card {
    width: rem(800);
    height: rem(800);
    background-color: rgb(211, 148, 31);
    border-radius: 5px;
    padding: 40px;
    // position: absolute;
    // left: 50%;
    // top: 50%;
    // transform: translate(-50%, -50%);
    box-shadow: rgba(0, 0, 0, 0.205) 5px 5px 15px;


    .nav-menu {
        // border: 1px solid black;
        width: rem(50);
        height: rem(50);
        transition: all .5s ease-in-out;
        cursor: pointer;
        margin-bottom: 40px;

        span {
            display: block;
            height: rem(7);
            width: 100%;
            background-color: #fff;
            border-radius: rem(5);
            transition: all .5s ease-in-out;

            &:not(:last-child) {
                margin-bottom: rem(14.5);
            }
        }

        &.active {
            transition-delay: 1s;
            transform: rotate(45deg);

            >span:nth-child(1) {
                transform: translateY(22px);
                transition-delay: .5s;
            }

            >span:nth-child(2) {
                transform: scale(0);
            }

            >span:nth-child(3) {
                transform: rotate(-90deg) translateX(22px);
                transition-delay: .5s;
            }
        }
    }

    .checkbox-label {
        position: relative;
        display: block;
        width: rem(80);
        height: rem(40);
        border-radius: rem(20);
        cursor: pointer;
        background-color: rgba(255, 255, 255, 0.692);
        box-shadow: 0px 10px 13px -7px #000000, inset 0px 10px 50px -3px rgba(0, 0, 0, 0);
        transition: all .3s ease-in-out;

        &.active {
            background-color: rgba(208, 250, 208, 0.555);
            animation: rummage .3s linear;
        }

        .checkbox-span {
            display: block;
            width: rem(36);
            height: rem(36);
            border-radius: 50%;
            background: gray;
            position: absolute;
            top: rem(2);
            left: rem(2);
            transition: all .3s ease-in-out;
        }
    }

    .checkbox {
        display: none;
    }

    .checkbox:checked~.checkbox-span {
        left: rem(42);
        background: rgb(27, 139, 32);
        animation: checked .3s ease-in-out;
    }

}